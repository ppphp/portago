package elog

import (
	"fmt"
	"github.com/ppphp/portago/pkg/ebuild"
	"github.com/ppphp/portago/pkg/exception"
	"github.com/ppphp/portago/pkg/myutil"
	"github.com/ppphp/portago/pkg/util/msg"
	"os"
	"strings"
	"time"
)

var _config_keys = []string{"PORTAGE_ELOG_MAILURI", "PORTAGE_ELOG_MAILFROM",
	"PORTAGE_ELOG_MAILSUBJECT",}
var mail_summary_items = map[string]*struct{ms1, ms2 map[string]string}{}
func mail_summary_process(mysettings *ebuild.Config, key string, logentries map[string][]struct {s string;ss []string}, fulltext string) {
	time_str := time.Now().Format("20060102-150405 07:00") //%Y%m%d-%H%M%S %Z
	header := fmt.Sprintf(">>> Messages generated for package %s by process %d on %s:\n\n", key, os.Getpid(),  time_str)
	config_root := mysettings.ValueDict["PORTAGE_CONFIGROOT"]
	config_dict := map[string] string{}
	for _,  k:= range _config_keys {
		v := mysettings.ValueDict[k]
		if v != "" {
			config_dict[k] = v
		}
	}
	if _, ok := mail_summary_items[config_root]; !ok {
		mail_summary_items[config_root] = &struct{ms1, ms2 map[string]string}{config_dict, map[string]string{}}
	}
	v := mail_summary_items[config_root]
	items :=  v.ms2
	items[key] = header + fulltext
}

func mail_summary_finalize() {
	for mysettings, items := range mail_summary_items {
		_mail_summary_finalize(mysettings, items)
	}
	mail_summary_items = map[string]*struct{ ms1, ms2 map[string]string }{}
}

func _mail_summary_finalize(mysettings , items map[string]string) {
	count := ""
	if len(items) == 0 {
		return
	} else if
	len(items) == 1 {
		count = "one package"
	} else {
		count = "multiple packages"
	}
	myrecipient := "root@localhost"
	if myutil.Inmss(mysettings, "PORTAGE_ELOG_MAILURI") {
		myrecipient = strings.Fields(mysettings["PORTAGE_ELOG_MAILURI"])[0]
	}
	myfrom := mysettings["PORTAGE_ELOG_MAILFROM"]
	myfrom = strings.ReplaceAll(myfrom, "${HOST}", socket.getfqdn())
	mysubject := mysettings["PORTAGE_ELOG_MAILSUBJECT"]
	mysubject = strings.ReplaceAll(mysubject, "${PACKAGE}", count)
	mysubject = strings.ReplaceAll(mysubject, "${HOST}", socket.getfqdn())

	mybody := fmt.Sprintf("elog messages for the following packages generated by "+
		"process %d on host %s:\n", os.Getpid(), socket.getfqdn())
	for key := range items {
		mybody += fmt.Sprintf("- %s\n", key)
	}

	mymessage = portage.mail.create_message(myfrom, myrecipient, mysubject,
		mybody, attachments = list(items.values()))

try:
try:
	AlarmSignal.register(60)
	portage.mail.send_mail(mysettings, mymessage)
finally:
	AlarmSignal.unregister()
	except
AlarmSignal:
	msg.WriteMsg("Timeout in finalize() for elog system 'mail_summary'\n",
		noiselevel = -1)
	except
	exception.PortageException
	as
e:
	msg.WriteMsg("%s\n" % (e, ), noiselevel = -1)

	return
}

