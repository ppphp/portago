package elog

import (
	"github.com/ppphp/portago/pkg/data"
	"github.com/ppphp/portago/pkg/ebuild"
	"github.com/ppphp/portago/pkg/myutil"
	"github.com/ppphp/portago/pkg/util"
	"github.com/ppphp/portago/pkg/util/msg"
	"os"
	"path/filepath"
	"strings"
	"syscall"
)

func save_summary_process(mysettings *ebuild.Config, key string, logentries map[string][]struct {s string;ss []string}, fulltext string) {
	logdir := ""
	if mysettings.ValueDict["PORTAGE_LOGDIR"] != "" {
		logdir = msg.NormalizePath(mysettings.ValueDict["PORTAGE_LOGDIR"])
	}else {
		logdir = filepath.Join(string(os.PathSeparator), strings.TrimLeft(mysettings.ValueDict["EPREFIX"], string(os.PathSeparator)),
			"var", "log", "portage")
	}

	if ! myutil.PathIsDir(logdir) {
		logdir_uid := -1
		if *data.Secpass >= 2 {
			logdir_uid = *data.Portage_uid
		}
		util.EnsureDirs(logdir, uint32(logdir_uid), *data.Portage_gid, 02770, -1, nil, false)
	}
	elogdir := filepath.Join(logdir, "elog")
	atom._ensure_log_subdirs(logdir, elogdir)

	elogfilename := elogdir + "/summary.log"
try:
	elogfile = io.open(_unicode_encode(elogfilename,
		encoding = _encodings['fs'], errors = 'strict'),
	mode = 'a', encoding=_encodings['content'],
		errors = 'backslashreplace')
	except
	IOError
	as
e:
	func_call = "open('%s', 'a')" % elogfilename
	if e.errno == syscall.EACCES:
	raise
	portage.exception.PermissionDenied(func_call)
	elif
	e.errno == syscall.EPERM:
	raise
	portage.exception.OperationNotPermitted(func_call)
	elif
	e.errno == syscall.EROFS:
	raise
	portage.exception.ReadOnlyFileSystem(func_call)
	else:
	raise

	elogdir_st = os.Stat(elogdir)
	elogdir_gid = elogdir_st.st_gid
	elogdir_grp_mode = 0o060 & elogdir_st.st_mode

	logfile_uid = -1
	if portage.data.Secpass >= 2:
	logfile_uid = elogdir_st.st_uid
	apply_permissions(elogfilename, data.uid = logfile_uid, gid = elogdir_gid,
		mode = elogdir_grp_mode, mask=0)

	time_fmt = "%Y-%m-%d %H:%M:%S %Z"
	if sys.hexversion < 0x3000000:
	time_fmt = _unicode_encode(time_fmt)
	time_str = time.strftime(time_fmt, time.localtime(time.time()))
	time_str = _unicode_decode(time_str,
		encoding = _encodings['content'], errors = 'replace')
	elogfile.write(_(">>> Messages generated by process "
	"%(pid)d on %(time)s for package %(pkg)s:\n\n") %
	{"pid": os.getpid(), "time": time_str, "pkg": key})
	elogfile.write(_unicode_decode(fulltext))
	elogfile.write("\n")
	elogfile.close()

	return elogfilename
}
